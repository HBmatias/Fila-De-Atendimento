class Tables{constructor(){this.table="",this.increment=Object.keys(this.getData()).length}setList(){this[this.table]=this.getData()}getData(id=null){const data=localStorage.getItem(this.table);try{if(!data)return{};if(null===id)return JSON.parse(data)}catch(error){throw console.error("An error occurred while getting the data:",error),error}const patient=JSON.parse(data)[id];return patient||{}}exists(value,field){const data=this.getData();let exists=!1;try{Object.keys(data).forEach(key=>{data[key][field]==value&&(exists=!0)})}catch(error){throw console.error("An error occurred while checking if the value exists:",error),error}return this.setList(),exists}addRow(row){let data=this.getData();try{if(0==data.length)return alert("Preencha todos os campos!"),!1;data[this.increment]=row,this.increment++,localStorage.setItem(this.table,JSON.stringify(data))}catch(error){throw console.error("An error occurred while adding the row:",error),error}return this.setList(),!0}removeRow(id){let data=this.getData();try{delete data[id],localStorage.setItem(this.table,JSON.stringify(data))}catch(error){throw console.error("An error occurred while removing the row:",error),error}return this.setList(),!0}removeRows(ids){let data=this.getData();try{ids.forEach(id=>{delete data[id]}),localStorage.setItem(this.table,JSON.stringify(data))}catch(error){throw console.error("An error occurred while removing the rows:",error),error}return this.setList(),!0}updateRow(id,data){const patients=this.getData();try{patients[id]=data,localStorage.setItem(this.table,JSON.stringify(patients))}catch(error){throw console.error("An error occurred while updating the row:",error),error}return this.setList(),!0}}class Patients extends Tables{constructor(){if(super(),this.table="patients",this.increment=Object.keys(this.getData()).length,0===this.increment){let patients;[{name:"John Doe",birthday:"1980-01-01",cpf:"11122255523"},{name:"Jane Doe",birthday:"1985-02-02",cpf:"11122255567"},{name:"Jim Doe",birthday:"1990-03-03",cpf:"11122255510"},{name:"Jackie Doe",birthday:"1982-04-04",cpf:"11122255511"},{name:"Jordan Smith",birthday:"1988-05-05",cpf:"11122255531"},{name:"Jennifer Williams",birthday:"1995-06-06",cpf:"11122255551"},{name:"Michael Johnson",birthday:"1983-07-07",cpf:"11122255571"},{name:"Megan Brown",birthday:"1992-08-08",cpf:"11122255592"},{name:"Matthew Taylor",birthday:"1986-09-09",cpf:"11122255512"},{name:"Melissa Davis",birthday:"1991-10-10",cpf:"11122255532"},{name:"Maxwell Miller",birthday:"1984-11-11",cpf:"11122255552"},{name:"Michelle Anderson",birthday:"1993-12-12",cpf:"11122255572"},{name:"Mark Thomas",birthday:"1981-01-13",cpf:"11122255593"},{name:"Maria Garcia",birthday:"1994-02-14",cpf:"11122255513"},{name:"Martin Rodriguez",birthday:"1987-03-15",cpf:"11122255533"}].forEach(patient=>{this.addRow(patient)})}this.setList()}getRowByCPF(cpf){const patients=this.getData();let patient={};return Object.keys(patients).forEach(key=>{patients[key].cpf==cpf&&(patient=patients[key],patient.id=key)}),patient}}class PriorityList extends Tables{constructor(){if(super(),this.table="priority_list",this.increment=Object.keys(this.getData()).length,0===this.increment){let priority_list;[{patient_id:"0",priority:"1",date:"2023-11-26 20:30:07",health:"2",family:"3",symptoms:"1",deterioration:"1",socioeconomic:"2",accessToCare:"3"},{patient_id:"1",priority:"2",date:"2023-11-26 20:30:07",health:"3",family:"2",symptoms:"1",deterioration:"1",socioeconomic:"2",accessToCare:"3"},{patient_id:"2",priority:"3",date:"2023-11-26 20:30:07",health:"1",family:"2",symptoms:"3",deterioration:"1",socioeconomic:"2",accessToCare:"3"},{patient_id:"3",priority:"1",date:"2023-11-26 20:30:07",health:"2",family:"3",symptoms:"1",deterioration:"1",socioeconomic:"2",accessToCare:"3"},{patient_id:"4",priority:"2",date:"2023-11-26 20:30:07",health:"3",family:"2",symptoms:"1",deterioration:"1",socioeconomic:"2",accessToCare:"3"}].forEach(patient=>{this.addRow(patient)})}this.setList()}}
//# sourceMappingURL=database.min.js.map