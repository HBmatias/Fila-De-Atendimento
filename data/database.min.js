class Tables{constructor(){this.table="",this.increment=Object.keys(this.getData()).length}getData(id=null){const data=localStorage.getItem(this.table);if(!data)return{};if(null===id)return JSON.parse(data);const patient=JSON.parse(data)[id];return patient||{}}addRow(row){let data=this.getData();return 0==data.length?(alert("Preencha todos os campos!"),!1):(data[this.increment]=row,this.increment++,localStorage.setItem(this.table,JSON.stringify(data)),!0)}removeRow(id){let data=this.getData();delete data[id],localStorage.setItem(this.table,JSON.stringify(data))}removeRows(ids){let data=this.getData();ids.forEach(id=>{delete data[id]}),localStorage.setItem(this.table,JSON.stringify(data))}updateRow(id,data){const patients=this.getData();patients[id]=data,localStorage.setItem(this.table,JSON.stringify(patients))}}class Patient extends Tables{constructor(){super(),this.table="patients",this.patients={0:{name:"John Doe",birthday:"1980-01-01",cpf:"11122255523"},1:{name:"Jane Doe",birthday:"1985-02-02",cpf:"11122255567"},2:{name:"Jim Doe",birthday:"1990-03-03",cpf:"11122255510"},3:{name:"Jackie Doe",birthday:"1982-04-04",cpf:"11122255511"},4:{name:"Jordan Smith",birthday:"1988-05-05",cpf:"11122255531"},5:{name:"Jennifer Williams",birthday:"1995-06-06",cpf:"11122255551"},6:{name:"Michael Johnson",birthday:"1983-07-07",cpf:"11122255571"},7:{name:"Megan Brown",birthday:"1992-08-08",cpf:"11122255592"},8:{name:"Matthew Taylor",birthday:"1986-09-09",cpf:"11122255512"},9:{name:"Melissa Davis",birthday:"1991-10-10",cpf:"11122255532"},10:{name:"Maxwell Miller",birthday:"1984-11-11",cpf:"11122255552"},11:{name:"Michelle Anderson",birthday:"1993-12-12",cpf:"11122255572"},12:{name:"Mark Thomas",birthday:"1981-01-13",cpf:"11122255593"},13:{name:"Maria Garcia",birthday:"1994-02-14",cpf:"11122255513"},14:{name:"Martin Rodriguez",birthday:"1987-03-15",cpf:"11122255533"}},null==localStorage.getItem(this.table)&&localStorage.setItem(this.table,JSON.stringify(this.patients)),this.increment=Object.keys(this.getData()).length}getRowByCPF(cpf){const patients=this.getData(),keys=Object.keys(patients);for(let i=0;i<keys.length;i++){const key=keys[i];if(patients[key].cpf===cpf.replace(/\D/g,""))return patients[key]}return{}}}
//# sourceMappingURL=database.min.js.map